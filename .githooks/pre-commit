#!/bin/bash
# Pre-commit hook to run code quality checks

echo "üîç Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Collect staged Python files (respecting renames/deletions)
PY_FILES=$(git diff --cached --name-only --diff-filter=AM -- '*.py')

# Check if we have Python files to check
if [ -n "$PY_FILES" ]; then
    echo "üìù Checking Python files..."
    echo "  Files: $PY_FILES"

    # Resolve ruff executable (prefer project venv, fallback to uv or system)
    if [ -x "$(git rev-parse --show-toplevel)/.venv/bin/ruff" ]; then
        RUFF_CHECK_CMD=("$(git rev-parse --show-toplevel)/.venv/bin/ruff")
    elif command -v uv >/dev/null 2>&1; then
        RUFF_CHECK_CMD=(uv run ruff)
    else
        RUFF_CHECK_CMD=(ruff)
    fi

    # Run ruff check (linting) on staged files only
    echo "  Running ruff check..."
    if ! "${RUFF_CHECK_CMD[@]}" check --force-exclude $PY_FILES; then
        echo -e "${RED}‚ùå Linting issues found!${NC}"
        echo -e "${YELLOW}Run 'make lint-fix' to auto-fix issues${NC}"
        exit 1
    fi
    
    # Check if formatting is needed
    echo "  Checking code formatting..."
    # Use ruff format --check if available, otherwise skip
    if [ -x "$(git rev-parse --show-toplevel)/.venv/bin/ruff" ]; then
        FORMAT_CMD=("$(git rev-parse --show-toplevel)/.venv/bin/ruff")
    elif command -v uv &> /dev/null; then
        FORMAT_CMD=(uv run ruff)
    else
        FORMAT_CMD=(ruff)
    fi

    if ! "${FORMAT_CMD[@]}" format --check $PY_FILES; then
        echo -e "${RED}‚ùå Formatting issues found!${NC}"
        echo -e "${YELLOW}Run 'make format' to fix formatting${NC}"
        exit 1
    fi
    
    # Run type checking if available
    if command -v mypy &> /dev/null; then
        echo "  Running type check..."
        if ! make typecheck 2>/dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  Type checking issues found (non-blocking)${NC}"
            # Don't block commit for type issues, just warn
        fi
    fi
fi

# Check for sensitive data patterns
echo "üîê Checking for sensitive data..."
SENSITIVE_PATTERNS=(
    "sk-[a-zA-Z0-9]{48}"  # Anthropic API keys
    "ANTHROPIC_API_KEY"
    "password\s*=\s*[\"'][^\"']+[\"']"
    "secret\s*=\s*[\"'][^\"']+[\"']"
    "token\s*=\s*[\"'][^\"']+[\"']"
)

STAGED_FILES=$(git diff --cached --name-only)
for pattern in "${SENSITIVE_PATTERNS[@]}"; do
    for file in $STAGED_FILES; do
        # Skip hook files themselves to avoid false positives on pattern definitions
        if [ "$file" = ".githooks/pre-commit" ]; then
            continue
        fi

        if [ -f "$file" ] && grep -E "$pattern" "$file" >/dev/null 2>&1; then
            echo -e "${RED}‚ùå Possible sensitive data detected in $file!${NC}"
            echo -e "${YELLOW}Please review your changes for API keys or secrets${NC}"
            exit 1
        fi
    done
done

# Check for large files
echo "üì¶ Checking file sizes..."
MAX_SIZE=5242880  # 5MB in bytes
for file in $(git diff --cached --name-only); do
    if [ -f "$file" ]; then
        size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
        if [ "$size" -gt "$MAX_SIZE" ]; then
            echo -e "${RED}‚ùå File $file is larger than 5MB${NC}"
            exit 1
        fi
    fi
done

echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
exit 0
