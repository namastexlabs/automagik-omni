"""
Comprehensive tests for unified message routing.
Tests the MessageRouter with unified fields and routing decisions.
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch, call
from typing import Dict, Any

from src.services.message_router import MessageRouter
from src.db.models import InstanceConfig, User


class TestMessageRouterInit:
    """Test router initialization."""
    
    def test_router_initialization(self):
        """Test router can be initialized successfully."""
        router = MessageRouter()
        assert router is not None
        assert hasattr(router, 'logger')


class TestMessageRouterRouteTypeDetermination:
    """Test routing type determination logic."""
    
    def test_determine_route_type_hive_streaming(self, test_db):
        """Test route type determination for Hive streaming."""
        instance_config = InstanceConfig(
            instance_name="hive-streaming",
            instance_key="hive-streaming-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="test-agent",
            agent_stream_mode=True
        )
        test_db.add(instance_config)
        test_db.commit()
        
        router = MessageRouter()
        route_type = router._determine_route_type_unified(instance_config)
        
        assert route_type == "hive_streaming"
    
    def test_determine_route_type_hive_standard(self, test_db):
        """Test route type determination for Hive standard."""
        instance_config = InstanceConfig(
            instance_name="hive-standard",
            instance_key="hive-standard-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="test-agent",
            agent_stream_mode=False
        )
        test_db.add(instance_config)
        test_db.commit()
        
        router = MessageRouter()
        route_type = router._determine_route_type_unified(instance_config)
        
        assert route_type == "hive_standard"
    
    def test_determine_route_type_automagik(self, test_db):
        """Test route type determination for Automagik."""
        instance_config = InstanceConfig(
            instance_name="automagik",
            instance_key="automagik-key",
            agent_instance_type="automagik",
            agent_api_url="https://automagik.com/api",
            agent_api_key="automagik-key",
            agent_id="test-agent"
        )
        test_db.add(instance_config)
        test_db.commit()
        
        router = MessageRouter()
        route_type = router._determine_route_type_unified(instance_config)
        
        assert route_type == "automagik"
    
    def test_determine_route_type_invalid_instance_type(self, test_db):
        """Test route type determination with invalid instance type."""
        instance_config = InstanceConfig(
            instance_name="invalid",
            instance_key="invalid-key",
            agent_instance_type="invalid",
            agent_api_url="https://test.com/api",
            agent_api_key="test-key",
            agent_id="test-agent"
        )
        test_db.add(instance_config)
        test_db.commit()
        
        router = MessageRouter()
        route_type = router._determine_route_type_unified(instance_config)
        
        # Should default to automagik for unknown types
        assert route_type == "automagik"


class TestMessageRouterStreamingLogic:
    """Test streaming decision logic."""
    
    def test_should_use_streaming_unified_true(self, test_db):
        """Test streaming detection when conditions are met."""
        instance_config = InstanceConfig(
            instance_name="streaming-enabled",
            instance_key="streaming-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="test-agent",
            agent_stream_mode=True
        )
        test_db.add(instance_config)
        test_db.commit()
        
        router = MessageRouter()
        should_stream = router.should_use_streaming_unified(instance_config)
        
        assert should_stream is True
    
    def test_should_use_streaming_unified_false_not_hive(self, test_db):
        """Test streaming detection for non-Hive instance."""
        instance_config = InstanceConfig(
            instance_name="automagik-no-streaming",
            instance_key="automagik-key",
            agent_instance_type="automagik",
            agent_api_url="https://automagik.com/api",
            agent_api_key="automagik-key",
            agent_id="test-agent",
            agent_stream_mode=True  # Even with stream mode enabled
        )
        test_db.add(instance_config)
        test_db.commit()
        
        router = MessageRouter()
        should_stream = router.should_use_streaming_unified(instance_config)
        
        assert should_stream is False
    
    def test_should_use_streaming_unified_false_disabled(self, test_db):
        """Test streaming detection when streaming is disabled."""
        instance_config = InstanceConfig(
            instance_name="hive-no-streaming",
            instance_key="hive-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="test-agent",
            agent_stream_mode=False
        )
        test_db.add(instance_config)
        test_db.commit()
        
        router = MessageRouter()
        should_stream = router.should_use_streaming_unified(instance_config)
        
        assert should_stream is False
    
    def test_should_use_streaming_unified_false_incomplete_config(self, test_db):
        """Test streaming detection with incomplete configuration."""
        instance_config = InstanceConfig(
            instance_name="hive-incomplete",
            instance_key="hive-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            # Missing agent_id
            agent_stream_mode=True
        )
        test_db.add(instance_config)
        test_db.commit()
        
        router = MessageRouter()
        should_stream = router.should_use_streaming_unified(instance_config)
        
        assert should_stream is False


class TestMessageRouterMainProcessing:
    """Test the main process_message_unified method."""
    
    @pytest.mark.asyncio
    async def test_process_message_unified_no_config(self):
        """Test processing without instance config raises error."""
        router = MessageRouter()
        
        with pytest.raises(ValueError, match="instance_config is required"):
            await router.process_message_unified(
                message_text="Test message",
                user_id="user123",
                user=None,
                session_identifier="session123",
                message_type="text",
                instance_config=None
            )
    
    @pytest.mark.asyncio
    @patch('src.services.message_router_unified.MessageRouter._process_hive_streaming')
    async def test_process_message_unified_hive_streaming(self, mock_process_streaming, test_db):
        """Test processing routes to Hive streaming."""
        # Setup instance config for streaming
        instance_config = InstanceConfig(
            instance_name="hive-streaming",
            instance_key="hive-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="streaming-agent",
            agent_stream_mode=True
        )
        test_db.add(instance_config)
        test_db.commit()
        
        # Mock return value
        mock_process_streaming.return_value = {
            "response": "Streaming response",
            "route_type": "hive_streaming"
        }
        
        router = MessageRouter()
        result = await router.process_message_unified(
            message_text="Test message",
            user_id="user123",
            user=None,
            session_identifier="session123",
            message_type="text",
            instance_config=instance_config
        )
        
        # Verify streaming was called
        mock_process_streaming.assert_called_once()
        assert result["route_type"] == "hive_streaming"
        assert result["response"] == "Streaming response"
    
    @pytest.mark.asyncio
    @patch('src.services.message_router_unified.MessageRouter._process_hive_standard')
    async def test_process_message_unified_hive_standard(self, mock_process_standard, test_db):
        """Test processing routes to Hive standard."""
        # Setup instance config for standard
        instance_config = InstanceConfig(
            instance_name="hive-standard",
            instance_key="hive-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="standard-agent",
            agent_stream_mode=False
        )
        test_db.add(instance_config)
        test_db.commit()
        
        # Mock return value
        mock_process_standard.return_value = {
            "response": "Standard response",
            "route_type": "hive_standard"
        }
        
        router = MessageRouter()
        result = await router.process_message_unified(
            message_text="Test message",
            user_id="user123",
            user=None,
            session_identifier="session123",
            message_type="text",
            instance_config=instance_config
        )
        
        # Verify standard was called
        mock_process_standard.assert_called_once()
        assert result["route_type"] == "hive_standard"
        assert result["response"] == "Standard response"
    
    @pytest.mark.asyncio
    @patch('src.services.message_router_unified.MessageRouter._process_automagik_standard')
    async def test_process_message_unified_automagik(self, mock_process_automagik, test_db):
        """Test processing routes to Automagik."""
        # Setup instance config for Automagik
        instance_config = InstanceConfig(
            instance_name="automagik",
            instance_key="automagik-key",
            agent_instance_type="automagik",
            agent_api_url="https://automagik.com/api",
            agent_api_key="automagik-key",
            agent_id="automagik-agent"
        )
        test_db.add(instance_config)
        test_db.commit()
        
        # Mock return value
        mock_process_automagik.return_value = {
            "response": "Automagik response",
            "route_type": "automagik"
        }
        
        router = MessageRouter()
        result = await router.process_message_unified(
            message_text="Test message",
            user_id="user123",
            user=None,
            session_identifier="session123",
            message_type="text",
            instance_config=instance_config
        )
        
        # Verify automagik was called
        mock_process_automagik.assert_called_once()
        assert result["route_type"] == "automagik"
        assert result["response"] == "Automagik response"


class TestMessageRouterHiveStreaming:
    """Test Hive streaming processing."""
    
    @pytest.mark.asyncio
    @patch('src.services.automagik_hive_client.AutomagikHiveClient')
    async def test_process_hive_streaming_agent(self, mock_client_class, test_db):
        """Test Hive streaming for agent."""
        # Setup instance config
        instance_config = InstanceConfig(
            instance_name="hive-agent",
            instance_key="hive-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="test-agent",
            agent_type="agent",
            agent_stream_mode=True
        )
        test_db.add(instance_config)
        test_db.commit()
        
        # Mock client
        mock_client = AsyncMock()
        mock_client_class.return_value = mock_client
        mock_client.stream_agent_conversation.return_value = {
            "full_response": "Agent streaming response",
            "run_id": "run_123",
            "status": "completed"
        }
        
        router = MessageRouter()
        result = await router._process_hive_streaming(
            message_text="Test message",
            user_id="user123",
            user=None,
            session_identifier="session123",
            message_type="text",
            instance_config=instance_config,
            media_contents=None,
            trace_context=None
        )
        
        # Verify client was called correctly
        mock_client.stream_agent_conversation.assert_called_once()
        call_args = mock_client.stream_agent_conversation.call_args
        assert call_args[1]["agent_id"] == "test-agent"
        assert call_args[1]["prompt"] == "Test message"
        
        # Verify response
        assert result["response"] == "Agent streaming response"
        assert result["source"] == "automagik_hive"
    
    @pytest.mark.asyncio
    @patch('src.services.automagik_hive_client.AutomagikHiveClient')
    async def test_process_hive_streaming_team(self, mock_client_class, test_db):
        """Test Hive streaming for team."""
        # Setup instance config for team
        instance_config = InstanceConfig(
            instance_name="hive-team",
            instance_key="hive-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="test-team",
            agent_type="team",
            agent_stream_mode=True
        )
        test_db.add(instance_config)
        test_db.commit()
        
        # Mock client
        mock_client = AsyncMock()
        mock_client_class.return_value = mock_client
        mock_client.stream_team_conversation.return_value = {
            "full_response": "Team streaming response",
            "run_id": "team_run_123",
            "status": "completed"
        }
        
        router = MessageRouter()
        result = await router._process_hive_streaming(
            message_text="Team message",
            user_id="user123",
            user=None,
            session_identifier="session123",
            message_type="text",
            instance_config=instance_config,
            media_contents=None,
            trace_context=None
        )
        
        # Verify client was called correctly
        mock_client.stream_team_conversation.assert_called_once()
        call_args = mock_client.stream_team_conversation.call_args
        assert call_args[1]["team_id"] == "test-team"
        assert call_args[1]["prompt"] == "Team message"
        
        # Verify response
        assert result["response"] == "Team streaming response"
    
    @pytest.mark.asyncio
    @patch('src.services.message_router_unified.MessageRouter._process_automagik_standard')
    @patch('src.services.automagik_hive_client.AutomagikHiveClient')
    async def test_process_hive_streaming_fallback(self, mock_client_class, mock_automagik_fallback, test_db):
        """Test Hive streaming fallback to Automagik on error."""
        # Setup instance config
        instance_config = InstanceConfig(
            instance_name="hive-fallback",
            instance_key="hive-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="fallback-agent",
            agent_stream_mode=True
        )
        test_db.add(instance_config)
        test_db.commit()
        
        # Mock client to raise exception
        mock_client = AsyncMock()
        mock_client_class.return_value = mock_client
        mock_client.stream_agent_conversation.side_effect = Exception("Streaming failed")
        
        # Mock fallback return
        mock_automagik_fallback.return_value = {
            "response": "Fallback response",
            "source": "automagik"
        }
        
        router = MessageRouter()
        result = await router._process_hive_streaming(
            message_text="Test message",
            user_id="user123",
            user=None,
            session_identifier="session123",
            message_type="text",
            instance_config=instance_config,
            media_contents=None,
            trace_context=None
        )
        
        # Verify fallback was called
        mock_automagik_fallback.assert_called_once()
        assert result["response"] == "Fallback response"


class TestMessageRouterHiveStandard:
    """Test Hive standard processing."""
    
    @pytest.mark.asyncio
    @patch('src.services.automagik_hive_client.AutomagikHiveClient')
    async def test_process_hive_standard_agent(self, mock_client_class, test_db):
        """Test Hive standard for agent."""
        # Setup instance config
        instance_config = InstanceConfig(
            instance_name="hive-standard-agent",
            instance_key="hive-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="standard-agent",
            agent_type="agent",
            agent_stream_mode=False
        )
        test_db.add(instance_config)
        test_db.commit()
        
        # Mock client
        mock_client = AsyncMock()
        mock_client_class.return_value = mock_client
        
        # Mock response object
        mock_response = MagicMock()
        mock_response.response = "Standard agent response"
        mock_response.id = "run_456"
        mock_response.status = "completed"
        
        mock_client.create_agent_run.return_value = mock_response
        
        router = MessageRouter()
        result = await router._process_hive_standard(
            message_text="Standard message",
            user_id="user123",
            user=None,
            session_identifier="session123",
            message_type="text",
            instance_config=instance_config,
            media_contents=None,
            trace_context=None
        )
        
        # Verify client was called correctly
        mock_client.create_agent_run.assert_called_once()
        call_args = mock_client.create_agent_run.call_args
        assert call_args[1]["agent_id"] == "standard-agent"
        assert call_args[1]["prompt"] == "Standard message"
        assert call_args[1]["stream"] is False
        
        # Verify response
        assert result["response"] == "Standard agent response"
        assert result["source"] == "automagik_hive"
    
    @pytest.mark.asyncio
    @patch('src.services.automagik_hive_client.AutomagikHiveClient')
    async def test_process_hive_standard_team(self, mock_client_class, test_db):
        """Test Hive standard for team."""
        # Setup instance config for team
        instance_config = InstanceConfig(
            instance_name="hive-standard-team",
            instance_key="hive-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="standard-team",
            agent_type="team",
            agent_stream_mode=False
        )
        test_db.add(instance_config)
        test_db.commit()
        
        # Mock client
        mock_client = AsyncMock()
        mock_client_class.return_value = mock_client
        
        # Mock response object
        mock_response = MagicMock()
        mock_response.response = "Standard team response"
        mock_response.id = "team_run_456"
        mock_response.status = "completed"
        
        mock_client.create_team_run.return_value = mock_response
        
        router = MessageRouter()
        result = await router._process_hive_standard(
            message_text="Team standard message",
            user_id="user123",
            user=None,
            session_identifier="session123",
            message_type="text",
            instance_config=instance_config,
            media_contents=None,
            trace_context=None
        )
        
        # Verify client was called correctly
        mock_client.create_team_run.assert_called_once()
        call_args = mock_client.create_team_run.call_args
        assert call_args[1]["team_id"] == "standard-team"
        assert call_args[1]["prompt"] == "Team standard message"
        assert call_args[1]["stream"] is False
        
        # Verify response
        assert result["response"] == "Standard team response"
    
    @pytest.mark.asyncio
    @patch('src.services.message_router_unified.MessageRouter._process_automagik_standard')
    @patch('src.services.automagik_hive_client.AutomagikHiveClient')
    async def test_process_hive_standard_fallback(self, mock_client_class, mock_automagik_fallback, test_db):
        """Test Hive standard fallback to Automagik on error."""
        # Setup instance config
        instance_config = InstanceConfig(
            instance_name="hive-standard-fallback",
            instance_key="hive-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="fallback-agent",
            agent_stream_mode=False
        )
        test_db.add(instance_config)
        test_db.commit()
        
        # Mock client to raise exception
        mock_client = AsyncMock()
        mock_client_class.return_value = mock_client
        mock_client.create_agent_run.side_effect = Exception("Standard processing failed")
        
        # Mock fallback return
        mock_automagik_fallback.return_value = {
            "response": "Automagik fallback response",
            "source": "automagik"
        }
        
        router = MessageRouter()
        result = await router._process_hive_standard(
            message_text="Test message",
            user_id="user123",
            user=None,
            session_identifier="session123",
            message_type="text",
            instance_config=instance_config,
            media_contents=None,
            trace_context=None
        )
        
        # Verify fallback was called
        mock_automagik_fallback.assert_called_once()
        assert result["response"] == "Automagik fallback response"


class TestMessageRouterAutomagikStandard:
    """Test Automagik standard processing."""
    
    @pytest.mark.asyncio
    @patch('src.services.automagik_agent_handler.AutomagikAgentHandler')
    async def test_process_automagik_standard(self, mock_handler_class, test_db):
        """Test Automagik standard processing."""
        # Setup instance config
        instance_config = InstanceConfig(
            instance_name="automagik-standard",
            instance_key="automagik-key",
            agent_instance_type="automagik",
            agent_api_url="https://automagik.com/api",
            agent_api_key="automagik-key",
            agent_id="automagik-agent"
        )
        test_db.add(instance_config)
        test_db.commit()
        
        # Mock handler
        mock_handler = AsyncMock()
        mock_handler_class.return_value = mock_handler
        mock_handler.process_message.return_value = {
            "response": "Automagik standard response",
            "status": "success"
        }
        
        router = MessageRouter()
        result = await router._process_automagik_standard(
            message_text="Automagik message",
            user_id="user123",
            user=None,
            session_identifier="session123",
            message_type="text",
            instance_config=instance_config,
            media_contents=None,
            trace_context=None
        )
        
        # Verify handler was called
        mock_handler.process_message.assert_called_once()
        
        # Verify response format
        assert result["response"] == "Automagik standard response"
        assert result["source"] == "automagik_hive"


class TestMessageRouterResponseNormalization:
    """Test response normalization methods."""
    
    def test_normalize_hive_response_dict(self):
        """Test normalization of dictionary response."""
        router = MessageRouter()
        
        input_response = {
            "full_response": "Test response",
            "run_id": "run_123",
            "status": "completed",
            "other_data": "preserved"
        }
        
        result = router._normalize_hive_response(input_response)
        
        assert result["response"] == "Test response"
        assert result["source"] == "automagik_hive"
        assert result["original_response"]["run_id"] == "run_123"
        assert result["original_response"]["other_data"] == "preserved"
    
    def test_normalize_hive_response_object(self):
        """Test normalization of object response."""
        router = MessageRouter()
        
        # Mock response object
        mock_response = MagicMock()
        mock_response.response = "Object response"
        mock_response.id = "run_456"
        mock_response.status = "success"
        
        result = router._normalize_hive_response(mock_response)
        
        assert result["response"] == "Object response"
        assert result["source"] == "automagik_hive"
        assert result["original_response"]["id"] == "run_456"
        assert result["original_response"]["status"] == "success"
    
    def test_normalize_hive_response_string(self):
        """Test normalization of string response."""
        router = MessageRouter()
        
        result = router._normalize_hive_response("Simple string response")
        
        assert result["response"] == "Simple string response"
        assert result["source"] == "automagik_hive"
        assert result["original_response"] == "Simple string response"


class TestMessageRouterStreamingHelpers:
    """Test streaming helper methods."""
    
    @pytest.mark.asyncio
    async def test_stream_agent_conversation(self, test_db):
        """Test agent conversation streaming helper."""
        # Mock client
        mock_client = AsyncMock()
        mock_client.stream_agent_conversation.return_value = {
            "full_response": "Agent conversation",
            "run_id": "agent_run_123",
            "status": "completed"
        }
        
        router = MessageRouter()
        kwargs = {
            "message_text": "Agent test",
            "user_id": "user123",
            "session_identifier": "session123"
        }
        
        result = await router._stream_agent_conversation(
            hive_client=mock_client,
            agent_id="test-agent",
            kwargs=kwargs
        )
        
        # Verify client call
        mock_client.stream_agent_conversation.assert_called_once()
        call_args = mock_client.stream_agent_conversation.call_args
        assert call_args[1]["agent_id"] == "test-agent"
        assert call_args[1]["prompt"] == "Agent test"
        
        # Verify result
        assert result["full_response"] == "Agent conversation"
    
    @pytest.mark.asyncio
    async def test_stream_team_conversation(self, test_db):
        """Test team conversation streaming helper."""
        # Mock client
        mock_client = AsyncMock()
        mock_client.stream_team_conversation.return_value = {
            "full_response": "Team conversation",
            "run_id": "team_run_123",
            "status": "completed"
        }
        
        router = MessageRouter()
        kwargs = {
            "message_text": "Team test",
            "user_id": "user456",
            "session_identifier": "team_session456"
        }
        
        result = await router._stream_team_conversation(
            hive_client=mock_client,
            team_id="test-team",
            kwargs=kwargs
        )
        
        # Verify client call
        mock_client.stream_team_conversation.assert_called_once()
        call_args = mock_client.stream_team_conversation.call_args
        assert call_args[1]["team_id"] == "test-team"
        assert call_args[1]["prompt"] == "Team test"
        
        # Verify result
        assert result["full_response"] == "Team conversation"


class TestMessageRouterErrorHandling:
    """Test error handling in routing."""
    
    @pytest.mark.asyncio
    async def test_invalid_agent_type_fallback(self, test_db):
        """Test behavior with invalid agent type."""
        instance_config = InstanceConfig(
            instance_name="invalid-type",
            instance_key="invalid-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="test-agent",
            agent_type="invalid_type",  # Invalid type
            agent_stream_mode=True
        )
        test_db.add(instance_config)
        test_db.commit()
        
        router = MessageRouter()
        
        with patch('src.services.automagik_hive_client.AutomagikHiveClient') as mock_client_class:
            mock_client = AsyncMock()
            mock_client_class.return_value = mock_client
            
            # Should still work, treating as agent by default
            mock_client.stream_agent_conversation.return_value = {
                "full_response": "Response despite invalid type",
                "run_id": "run_789",
                "status": "completed"
            }
            
            result = await router._process_hive_streaming(
                message_text="Test message",
                user_id="user123",
                user=None,
                session_identifier="session123",
                message_type="text",
                instance_config=instance_config,
                media_contents=None,
                trace_context=None
            )
            
            # Should still process as agent (default fallback)
            mock_client.stream_agent_conversation.assert_called_once()
            assert result["response"] == "Response despite invalid type"
    
    @pytest.mark.asyncio
    async def test_missing_agent_id_handling(self, test_db):
        """Test behavior with missing agent_id."""
        instance_config = InstanceConfig(
            instance_name="missing-agent-id",
            instance_key="missing-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            # agent_id is missing/None
            agent_stream_mode=True
        )
        test_db.add(instance_config)
        test_db.commit()
        
        router = MessageRouter()
        
        with patch('src.services.automagik_hive_client.AutomagikHiveClient') as mock_client_class:
            mock_client = AsyncMock()
            mock_client_class.return_value = mock_client
            
            # Client should handle missing agent_id gracefully
            mock_client.stream_agent_conversation.return_value = {
                "full_response": "Default agent response",
                "run_id": "default_run",
                "status": "completed"
            }
            
            result = await router._process_hive_streaming(
                message_text="Test message",
                user_id="user123",
                user=None,
                session_identifier="session123",
                message_type="text",
                instance_config=instance_config,
                media_contents=None,
                trace_context=None
            )
            
            # Should use default agent behavior
            assert result["response"] == "Default agent response"


class TestMessageRouterIntegration:
    """Integration tests for complete message routing flow."""
    
    @pytest.mark.asyncio
    @patch('src.services.automagik_hive_client.AutomagikHiveClient')
    async def test_complete_hive_streaming_flow(self, mock_client_class, test_db):
        """Test complete message flow for Hive streaming."""
        # Create user and instance
        user = User(
            phone_number="+1234567890",
            first_name="Test",
            last_name="User"
        )
        test_db.add(user)
        
        instance_config = InstanceConfig(
            instance_name="integration-hive",
            instance_key="integration-key",
            agent_instance_type="hive",
            agent_api_url="https://hive.com/api",
            agent_api_key="hive-key",
            agent_id="integration-agent",
            agent_stream_mode=True
        )
        test_db.add(instance_config)
        test_db.commit()
        
        # Mock client
        mock_client = AsyncMock()
        mock_client_class.return_value = mock_client
        mock_client.stream_agent_conversation.return_value = {
            "full_response": "Complete integration response",
            "run_id": "integration_run",
            "status": "completed"
        }
        
        router = MessageRouter()
        result = await router.process_message_unified(
            message_text="Integration test message",
            user_id=user.id,
            user=user,
            session_identifier="integration_session",
            message_type="text",
            instance_config=instance_config,
            media_contents=None,
            trace_context={"trace_id": "test_trace"}
        )
        
        # Verify complete flow
        assert result["response"] == "Complete integration response"
        assert result["source"] == "automagik_hive"
        
        # Verify client received correct parameters
        mock_client.stream_agent_conversation.assert_called_once()
        call_args = mock_client.stream_agent_conversation.call_args
        assert call_args[1]["prompt"] == "Integration test message"
        assert call_args[1]["agent_id"] == "integration-agent"
    
    @pytest.mark.asyncio
    @patch('src.services.automagik_agent_handler.AutomagikAgentHandler')
    async def test_complete_automagik_flow(self, mock_handler_class, test_db):
        """Test complete message flow for Automagik."""
        # Create user and instance
        user = User(
            phone_number="+1987654321",
            first_name="Automagik",
            last_name="User"
        )
        test_db.add(user)
        
        instance_config = InstanceConfig(
            instance_name="integration-automagik",
            instance_key="integration-automagik-key",
            agent_instance_type="automagik",
            agent_api_url="https://automagik.com/api",
            agent_api_key="automagik-key",
            agent_id="integration-automagik-agent"
        )
        test_db.add(instance_config)
        test_db.commit()
        
        # Mock handler
        mock_handler = AsyncMock()
        mock_handler_class.return_value = mock_handler
        mock_handler.process_message.return_value = {
            "response": "Complete Automagik response",
            "status": "success"
        }
        
        router = MessageRouter()
        result = await router.process_message_unified(
            message_text="Automagik integration test",
            user_id=user.id,
            user=user,
            session_identifier="automagik_session",
            message_type="text",
            instance_config=instance_config,
            media_contents=[],
            trace_context={"trace_id": "automagik_trace"}
        )
        
        # Verify complete flow
        assert result["response"] == "Complete Automagik response"
        assert result["source"] == "automagik_hive"
        
        # Verify handler received correct parameters
        mock_handler.process_message.assert_called_once()