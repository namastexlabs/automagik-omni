name: Test Suite

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [dev]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    name: Python ${{ matrix.python-version }} Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.12"]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .
          pip install -e ".[discord]"
          
      - name: Set up test environment
        run: |
          # Create test database
          mkdir -p data
          touch data/test.db
          
          # Set environment variables for testing
          echo "DATABASE_URL=sqlite:///data/test.db" >> $GITHUB_ENV
          echo "AUTOMAGIK_OMNI_API_KEY=${{ secrets.TEST_API_KEY || 'dummy-key' }}" >> $GITHUB_ENV
          echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Run tests
        id: pytest
        run: |
          # Run pytest with simple output, skip known CI issues
          python -m pytest tests/ \
            -v \
            --tb=short \
            --color=yes \
            --no-header \
            -rN \
            --maxfail=10 \
            -k "not test_bearer_token_validation and not test_add_command_help" \
            2>&1 | tee test-output.txt
          
          # Capture exit code
          PYTEST_EXIT_CODE=${PIPESTATUS[0]}
          
          # Extract test summary
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -n 20 test-output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Exit with pytest exit code
          exit $PYTEST_EXIT_CODE

      - name: Upload test output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-output-${{ matrix.python-version }}
          path: test-output.txt
          retention-days: 7

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run ruff check
        id: ruff-check
        continue-on-error: true
        run: |
          echo "## Ruff Linting Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ruff check src/ tests/ 2>&1 | tee -a $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Run ruff format check
        id: ruff-format
        continue-on-error: true
        run: |
          echo "## Ruff Format Check" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ruff format --check src/ tests/ 2>&1 | tee -a $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

  status:
    name: Check Status
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Determine status
        run: |
          echo "## Workflow Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ **Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.lint.result }}" == "success" ]; then
            echo "✅ **Linting:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Linting:** Failed (non-blocking)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Fail if tests failed
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Tests must pass before merging!" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All required checks passed!" >> $GITHUB_STEP_SUMMARY
          fi